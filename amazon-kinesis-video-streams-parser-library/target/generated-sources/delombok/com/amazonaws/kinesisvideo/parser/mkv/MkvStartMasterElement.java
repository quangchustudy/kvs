// Generated by delombok at Thu Sep 21 09:23:35 ICT 2023
/*
Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). 
You may not use this file except in compliance with the License. 
A copy of the License is located at

   http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. 
This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and limitations under the License.
*/
package com.amazonaws.kinesisvideo.parser.mkv;

import com.amazonaws.kinesisvideo.parser.ebml.EBMLElementMetaData;
import java.nio.ByteBuffer;
import java.nio.channels.WritableByteChannel;
import java.util.List;
import static com.amazonaws.kinesisvideo.parser.ebml.EBMLUtils.UNKNOWN_LENGTH_VALUE;

/**
 * Class representing the start of a mkv master element.
 * It includes the bytes containing the id and size of the element along with its {@link EBMLElementMetaData}
 * and its path (if specified).
 */
public class MkvStartMasterElement extends MkvElement {
    private final long dataSize;
    private final ByteBuffer idAndSizeRawBytes = ByteBuffer.allocate(MAX_ID_AND_SIZE_BYTES);

    private MkvStartMasterElement(EBMLElementMetaData elementMetaData, List<EBMLElementMetaData> elementPath, long dataSize, ByteBuffer idAndSizeRawBytes) {
        super(elementMetaData, elementPath);
        this.dataSize = dataSize;
        this.idAndSizeRawBytes.put(idAndSizeRawBytes);
        this.idAndSizeRawBytes.flip();
        idAndSizeRawBytes.rewind();
    }

    @Override
    public boolean isMaster() {
        return true;
    }

    @Override
    public void accept(MkvElementVisitor visitor) throws MkvElementVisitException {
        visitor.visit(this);
    }

    @Override
    public boolean equivalent(MkvElement other) {
        return typeEquals(other) && this.dataSize == ((MkvStartMasterElement) other).dataSize;
    }

    public boolean isUnknownLength() {
        return dataSize == UNKNOWN_LENGTH_VALUE;
    }

    @Override
    public void writeToChannel(WritableByteChannel outputChannel) throws MkvElementVisitException {
        writeByteBufferToChannel(idAndSizeRawBytes, outputChannel);
    }

    public int getIdAndSizeRawBytesLength() {
        return idAndSizeRawBytes.limit();
    }


    @SuppressWarnings("all")
    public static class MkvStartMasterElementBuilder {
        @SuppressWarnings("all")
        private EBMLElementMetaData elementMetaData;
        @SuppressWarnings("all")
        private List<EBMLElementMetaData> elementPath;
        @SuppressWarnings("all")
        private long dataSize;
        @SuppressWarnings("all")
        private ByteBuffer idAndSizeRawBytes;

        @SuppressWarnings("all")
        MkvStartMasterElementBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public MkvStartMasterElement.MkvStartMasterElementBuilder elementMetaData(final EBMLElementMetaData elementMetaData) {
            this.elementMetaData = elementMetaData;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public MkvStartMasterElement.MkvStartMasterElementBuilder elementPath(final List<EBMLElementMetaData> elementPath) {
            this.elementPath = elementPath;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public MkvStartMasterElement.MkvStartMasterElementBuilder dataSize(final long dataSize) {
            this.dataSize = dataSize;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public MkvStartMasterElement.MkvStartMasterElementBuilder idAndSizeRawBytes(final ByteBuffer idAndSizeRawBytes) {
            this.idAndSizeRawBytes = idAndSizeRawBytes;
            return this;
        }

        @SuppressWarnings("all")
        public MkvStartMasterElement build() {
            return new MkvStartMasterElement(this.elementMetaData, this.elementPath, this.dataSize, this.idAndSizeRawBytes);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "MkvStartMasterElement.MkvStartMasterElementBuilder(elementMetaData=" + this.elementMetaData + ", elementPath=" + this.elementPath + ", dataSize=" + this.dataSize + ", idAndSizeRawBytes=" + this.idAndSizeRawBytes + ")";
        }
    }

    @SuppressWarnings("all")
    public static MkvStartMasterElement.MkvStartMasterElementBuilder builder() {
        return new MkvStartMasterElement.MkvStartMasterElementBuilder();
    }

    @SuppressWarnings("all")
    public long getDataSize() {
        return this.dataSize;
    }

    @SuppressWarnings("all")
    public ByteBuffer getIdAndSizeRawBytes() {
        return this.idAndSizeRawBytes;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "MkvStartMasterElement(super=" + super.toString() + ", dataSize=" + this.getDataSize() + ")";
    }
}
