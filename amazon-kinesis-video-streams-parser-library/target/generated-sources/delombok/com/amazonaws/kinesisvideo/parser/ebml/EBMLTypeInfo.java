// Generated by delombok at Thu Sep 21 09:23:35 ICT 2023
/*
Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). 
You may not use this file except in compliance with the License. 
A copy of the License is located at

   http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. 
This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and limitations under the License.
*/
package com.amazonaws.kinesisvideo.parser.ebml;

/**
 * The type information for an EBML element.
 * This specifies the semantics of the EBML elements in an EBML document.
 * For example the TypeInfo for MKV will specify the semantics for the EBML elements that make up a MKV document.
 */
public class EBMLTypeInfo {
    private final int id;
    private final String name;
    private final int level;
    private final TYPE type;
    private boolean isRecursive;

    public boolean isGlobal() {
        return level < 0;
    }


    public enum TYPE {
        INTEGER, UINTEGER, FLOAT, STRING, UTF_8, DATE, MASTER, BINARY;
    }

    @SuppressWarnings("all")
    private static boolean $default$isRecursive() {
        return false;
    }


    @SuppressWarnings("all")
    public static class EBMLTypeInfoBuilder {
        @SuppressWarnings("all")
        private int id;
        @SuppressWarnings("all")
        private String name;
        @SuppressWarnings("all")
        private int level;
        @SuppressWarnings("all")
        private TYPE type;
        @SuppressWarnings("all")
        private boolean isRecursive$set;
        @SuppressWarnings("all")
        private boolean isRecursive$value;

        @SuppressWarnings("all")
        EBMLTypeInfoBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public EBMLTypeInfo.EBMLTypeInfoBuilder id(final int id) {
            this.id = id;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public EBMLTypeInfo.EBMLTypeInfoBuilder name(final String name) {
            this.name = name;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public EBMLTypeInfo.EBMLTypeInfoBuilder level(final int level) {
            this.level = level;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public EBMLTypeInfo.EBMLTypeInfoBuilder type(final TYPE type) {
            this.type = type;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @SuppressWarnings("all")
        public EBMLTypeInfo.EBMLTypeInfoBuilder isRecursive(final boolean isRecursive) {
            this.isRecursive$value = isRecursive;
            isRecursive$set = true;
            return this;
        }

        @SuppressWarnings("all")
        public EBMLTypeInfo build() {
            boolean isRecursive$value = this.isRecursive$value;
            if (!this.isRecursive$set) isRecursive$value = EBMLTypeInfo.$default$isRecursive();
            return new EBMLTypeInfo(this.id, this.name, this.level, this.type, isRecursive$value);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "EBMLTypeInfo.EBMLTypeInfoBuilder(id=" + this.id + ", name=" + this.name + ", level=" + this.level + ", type=" + this.type + ", isRecursive$value=" + this.isRecursive$value + ")";
        }
    }

    @SuppressWarnings("all")
    public static EBMLTypeInfo.EBMLTypeInfoBuilder builder() {
        return new EBMLTypeInfo.EBMLTypeInfoBuilder();
    }

    @SuppressWarnings("all")
    public EBMLTypeInfo(final int id, final String name, final int level, final TYPE type, final boolean isRecursive) {
        this.id = id;
        this.name = name;
        this.level = level;
        this.type = type;
        this.isRecursive = isRecursive;
    }

    @SuppressWarnings("all")
    public int getId() {
        return this.id;
    }

    @SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @SuppressWarnings("all")
    public int getLevel() {
        return this.level;
    }

    @SuppressWarnings("all")
    public TYPE getType() {
        return this.type;
    }

    @SuppressWarnings("all")
    public boolean isRecursive() {
        return this.isRecursive;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "EBMLTypeInfo(id=" + this.getId() + ", name=" + this.getName() + ", level=" + this.getLevel() + ", type=" + this.getType() + ", isRecursive=" + this.isRecursive() + ")";
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof EBMLTypeInfo)) return false;
        final EBMLTypeInfo other = (EBMLTypeInfo) o;
        if (!other.canEqual((Object) this)) return false;
        if (this.getId() != other.getId()) return false;
        if (this.getLevel() != other.getLevel()) return false;
        if (this.isRecursive() != other.isRecursive()) return false;
        final Object this$name = this.getName();
        final Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final Object this$type = this.getType();
        final Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof EBMLTypeInfo;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getId();
        result = result * PRIME + this.getLevel();
        result = result * PRIME + (this.isRecursive() ? 79 : 97);
        final Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        return result;
    }
}
